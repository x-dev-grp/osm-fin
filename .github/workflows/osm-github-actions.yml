name: Build and Deploy OSM (main branch)

on:
  push:
    branches: [ main ]

jobs:
  build_and_push:
    name: Build & Push Microservice Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Each entry here corresponds to one microservice repository. Adjust the
        # 'dir' field to point to the directory containing the service code if
        # your service lives in a subfolder. Otherwise, leave it as '.' for
        # repositories where the service is in the root.
        service:
          - name: securityservice
            dir: .
            port: 8088
          - name: financeservice
            dir: .
            port: 8080
          - name: productionservice
            dir: .
            port: 8081
          - name: gateway
            dir: .
            port: 8080

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      # Set up the JDK for building Spring Boot microservices
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      # Log in to GitHub Container Registry (GHCR) using the provided token
      - name: Docker login to ghcr.io
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      # Build the Docker image for each microservice
      - name: Build image
        working-directory: ${{ matrix.service.dir }}
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/${{ matrix.service.name }}
          TAG=main-${GITHUB_SHA::7}
          # Build the Docker image and tag it with both a unique SHA-based tag
          # and a "latest" tag for easy deployment. Ensure your repository
          # contains a Dockerfile at the specified working directory.
          docker build -t $IMAGE:$TAG -t $IMAGE:main-latest .

      # Push the images to GHCR
      - name: Push image
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/${{ matrix.service.name }}
          TAG=main-${GITHUB_SHA::7}
          docker push $IMAGE:$TAG
          docker push $IMAGE:main-latest

  # Build the Angular frontend and upload it to the VPS. This job only runs
  # when the repository contains the frontend code. You can remove or
  # conditionally run this job in non-frontend repositories.
  build_frontend:
    name: Build & Upload Angular Frontend
    runs-on: ubuntu-latest
    needs: build_and_push
    if: github.repository == 'x-dev-grp/osm-ms-fe'

    steps:
      - uses: actions/checkout@v4

      # Set up Node.js for Angular builds
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        working-directory: .

      # Build the Angular app in production mode
      - name: Build Angular app
        run: npx ng build --configuration=production --output-path=dist/osm
        working-directory: .

      # Copy the build artifacts to the VPS using an SCP action. The
      # `appleboy/scp-action` utility simplifies copying files via SSH.
      - name: Copy frontend files to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: dist/osm/
          target: /opt/osm/frontend/
          rm: true  # Remove existing files before copying

  # Deploy the updated stack on the VPS after building and uploading. This
  # job runs for all repositories once the build completes.
  deploy:
    name: Deploy on VPS
    runs-on: ubuntu-latest
    needs: [ build_and_push, build_frontend ]

    steps:
      # Set up SSH agent with the private key for deployment
      - name: SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Add the VPS to known_hosts to avoid host key verification prompts
      - name: Add VPS to known_hosts
        run: ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      # Run the deploy script on the VPS. Ensure that /opt/osm/scripts/deploy.sh
      # exists on the VPS and performs the necessary docker-compose pull and
      # up operations.
      - name: Pull & Restart stack
        run: ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '/opt/osm/scripts/deploy.sh'
